SA_naive_half<-function(N,S,T,p,total,r){
  if (S<N*length(Euler(N))){
    D=construction_half(N)
    column_optimal=sample(N*length(Euler(N))/2,S,replace=FALSE)
    value_optimal=L_2(D[,column_optimal],p)/floor((N/2)^{p-1}*(N+1)*S/3)
    for (i in 1:(total)){
      remaining_cloum=c(1:(N*length(Euler(N))/2))[-column_optimal]
      try_column=remaining_cloum[sample(length(remaining_cloum),1,replace=FALSE)]
      column_try=column_optimal
      column_try[sample(length(column_optimal),1,replace=FALSE)]= try_column
      value_try=L_2(D[,column_try],p)/floor((N/2)^{p-1}*(N+1)*S/3)
      if (value_try>value_optimal){
        column_optimal=column_try
        value_optimal=value_try
      }else{
        if( exp((value_try-value_optimal)/T)>runif(1,0,1)){
          column_optimal=column_try
          value_optimal=value_try
        }
      }
      T=r*T
    }
    return(D[,column_optimal])
  }else{
    return(construction(N))
  }
}
