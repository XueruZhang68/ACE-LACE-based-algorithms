
SA_leave_one_out_half_ACE_combined<-function(N,S,T,p,total,r,step,delta){
  m=floor(S/length(Euler(N)))
  K=S%%length(Euler(N))
  D=GLP(N,Euler(N))
  U_0=1:((N+1)/2)
  U_1=((N+1)/2+1):N
  value=1:step
  iiii=0
  if (m<(N+1)/2){
    U_optimal=sample(U_0,m,replace=FALSE)#####step 2 initial U
    column_optimal=sample(1:(((N+1)/2-m)*length(Euler(N))),K,replace=FALSE)#position of 
    #K-column 
    value_optimal=L_2(cbind(level_leave_one_out_com(D,U_optimal-1),
    level_leave_one_out_com(D,U_0[-U_optimal]-1)[,column_optimal]),p)/floor(((N-1)/2
    )^{p-1}*N*S/3)
    U_try=U_optimal
    while(var(value)>delta && iiii<=total){
      U_try[sample(length(U_optimal),1)]=U_0[-U_optimal][sample(length(U_0[-U_optimal]
      ),1)]
      column_try=sample(1:(((N+1)/2-m)*length(Euler(N))),K,replace=FALSE)
      value_try=L_2(cbind(level_leave_one_out_com(D,U_try-1),level_leave_one_out_com(D, 
      U_0[-U_try]-1)[,column_try]),p)/floor(((N-1)/2)^{p-1}*N*S/3)
      if (value_try> value_optimal){
        column_optimal=column_try
        U_optimal=U_try
        value_optimal=value_try
      }else{
        if(exp((value_try-value_optimal)/T)>runif(1,0,1)){
          column_optimal=column_try
          U_optimal=U_try
          value_optimal=value_try
        }
      }
      value=c(value[2:step],value_optimal)
      T=r*T
      iiii=iiii+1
      Target=cbind(level_leave_one_out_com(D,U_optimal-1),level_leave_one_out_com(D,
      U_0[-U_optimal]-1)[,column_optimal])
    }
    if(iiii<total){
      aaa=sapply(1:m,function(x){((U_optimal[x]-1)*(length(Euler(N)))+1):((U_optimal[x]
      )*(length(Euler(N))))})
      if (length(column_optimal)>0){
        hhhhh=sapply(1:length(column_optimal),function(x){column_optimal[x]-floor(
        column_optimal[x]/length(Euler(N)))*length(Euler(N))+(U_0[-U_optimal[
        ceiling(column_optimal[x]/length(Euler(N)))]-1)*length(Euler(N))})
      }else{
        hhhhh=NULL
      }
      column_optimal=c(as.vector(aaa),hhhhh)
      Target=SA_leave_one_out_half_naive_combined(N,S,T,p,total,r,iiii+1,column_optimal)
    }
    return(Target)
  }
  if (S==(N+1)/2*length(Euler(N))){
    return(level_leave_one_out_com(D,U_0-1))
  }
  if (S<(((N+1)/2+1)*length(Euler(N)))&& S>((N+1)*length(Euler(N))/2)){
    column_optimal=sample(1:((N-1)*length(Euler(N))/2),K,replace=FALSE)#position of 
    #K-column 
    value_optimal=L_2(cbind(level_leave_one_out_com(D,U_0-1),level_leave_one_out_com(D,
    U_1-1)[,column_optimal]),p)/floor(((N-1)/2)^{p-1}*N*S/3)
    while(var(value)>delta && iiii<=total){
      column_try=sample(1:((N-1)*length(Euler(N))/2),K,replace=FALSE)
      value_try=L_2(cbind(level_leave_one_out_com(D,U_0-1),level_leave_one_out_com(D,
      U_1-1)[,column_try]),p)/floor(((N-1)/2)^{p-1}*N*S/3)
      if (value_try> value_optimal){
        column_optimal=column_try
        value_optimal=value_try
      }else{
        if(exp((value_try-value_optimal)/T)>runif(1,0,1)){
          column_optimal=column_try
          value_optimal=value_try
        }
      }
      T=r*T
      value=c(value[2:step],value_optimal)
      T=r*T
      iiii=iiii+1
      Target=cbind(level_leave_one_out_com(D,U_0-1),level_leave_one_out_com(D,U_1-1)[,
      column_optimal])
    }
    if(iiii<total){
      Target=SA_leave_one_out_half_naive_combined(N,S,T,p,total,r,iiii+1,column_optimal)
    }
    return(Target)
  }
  if (S>=(((N+1)/2+1)*length(Euler(N))) && S<(N*length(Euler(N)))){
    U_optimal=sample(1:((N-1)/2),m-(N+1)/2,replace=FALSE)#####step 2 initial U
    column_optimal=sample(1:((N-m)*length(Euler(N))),K,replace=FALSE)# position of 
    #K-column 
    value_optimal=L_2(cbind(level_leave_one_out_com(D,U_0-1),level_leave_one_out_com(D,
    U_1[U_optimal]-1),level_leave_one_out_com(D,U_1[-U_optimal]-1)[,column_optimal]),p)
    /floor(((N-1)/2)^{p-1}*N*S/3)
    U_try=U_optimal
    while(var(value)>delta && iiii<=total){
      U_try[sample(length(U_optimal),1)]=c(1:((N-1)/2))[-U_optimal][sample(length(c(1:
      ((N-1)/2))[-U_optimal]),1)]
      column_try=sample(1:((N-m)*length(Euler(N))),K,replace=FALSE)
      value_try=L_2(cbind(level_leave_one_out_com(D,U_0-1),level_leave_one_out_com(D,
      U_1[U_try]-1),level_leave_one_out_com(D,U_1[-U_try]-1)[,column_try]),p)/floor(
      ((N-1)/2)^{p-1}*N*S/3)
      if (value_try> value_optimal){
        column_optimal=column_try
        U_optimal=U_try
        value_optimal=value_try
      }else{
        if(exp((value_try-value_optimal)/T)>runif(1,0,1)){
          column_optimal=column_try
          U_optimal=U_try
          value_optimal=value_try
        }
      }
      T=r*T
      value=c(value[2:step],value_optimal)
      T=r*T
      iiii=iiii+1
      Target=cbind(level_leave_one_out_com(D,U_0-1),level_leave_one_out_com(D,U_1[
      U_optimal]-1),level_leave_one_out_com(D,U_1[-U_optimal]-1)[,column_optimal])
    }
    if(iiii<total){
      aaa=sapply(1:(m-(N+1)/2),function(x){((U_optimal[x]-1)*(length(Euler(N)))+1):((
      U_optimal[x])*(length(Euler(N))))})
      if (length(column_optimal)>0){
        hhhhh=sapply(1:length(column_optimal),function(x){column_optimal[x]-floor(
        column_optimal[x]/length(Euler(N)))*length(Euler(N))+(c(1:((N-1)/2))[-
        U_optimal][ceiling(column_optimal[x]/length(Euler(N)))]-1)*length(Euler(N))})
      }else{
        hhhhh=NULL
      }
      column_optimal=c(as.vector(aaa),hhhhh)
      Target=SA_leave_one_out_half_naive_combined(N,S,T,p,total,r,iiii+1,column_optimal)
    }
    return(Target)
  }
  if (S==N*length(Euler(N))){
    return(level_leave_one_out_com(GLP(N,Euler(N)),1:N-1))
  }
  
}
